# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import entities_v1_pb2 as entities__v1__pb2


class EntitiesStub(object):
    """The Entities service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_entities = channel.unary_unary(
                '/entities_v1.Entities/get_entities',
                request_serializer=entities__v1__pb2.EntitiesPageRequest.SerializeToString,
                response_deserializer=entities__v1__pb2.EntitiesPageReply.FromString,
                )
        self.get_entity_by_id = channel.unary_unary(
                '/entities_v1.Entities/get_entity_by_id',
                request_serializer=entities__v1__pb2.EntityIdRequest.SerializeToString,
                response_deserializer=entities__v1__pb2.EntityReply.FromString,
                )
        self.get_entity_by_name = channel.unary_unary(
                '/entities_v1.Entities/get_entity_by_name',
                request_serializer=entities__v1__pb2.EntityNameRequest.SerializeToString,
                response_deserializer=entities__v1__pb2.EntityReply.FromString,
                )
        self.create_entity = channel.unary_unary(
                '/entities_v1.Entities/create_entity',
                request_serializer=entities__v1__pb2.EntityRequest.SerializeToString,
                response_deserializer=entities__v1__pb2.EntityReply.FromString,
                )
        self.update_entity = channel.unary_unary(
                '/entities_v1.Entities/update_entity',
                request_serializer=entities__v1__pb2.EntityRequest.SerializeToString,
                response_deserializer=entities__v1__pb2.EntityReply.FromString,
                )
        self.delete_entity_by_id = channel.unary_unary(
                '/entities_v1.Entities/delete_entity_by_id',
                request_serializer=entities__v1__pb2.EntityIdRequest.SerializeToString,
                response_deserializer=entities__v1__pb2.EntityReply.FromString,
                )


class EntitiesServicer(object):
    """The Entities service definition.
    """

    def get_entities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_entity_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_entity_by_name(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_entity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_entity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_entity_by_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EntitiesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_entities': grpc.unary_unary_rpc_method_handler(
                    servicer.get_entities,
                    request_deserializer=entities__v1__pb2.EntitiesPageRequest.FromString,
                    response_serializer=entities__v1__pb2.EntitiesPageReply.SerializeToString,
            ),
            'get_entity_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_entity_by_id,
                    request_deserializer=entities__v1__pb2.EntityIdRequest.FromString,
                    response_serializer=entities__v1__pb2.EntityReply.SerializeToString,
            ),
            'get_entity_by_name': grpc.unary_unary_rpc_method_handler(
                    servicer.get_entity_by_name,
                    request_deserializer=entities__v1__pb2.EntityNameRequest.FromString,
                    response_serializer=entities__v1__pb2.EntityReply.SerializeToString,
            ),
            'create_entity': grpc.unary_unary_rpc_method_handler(
                    servicer.create_entity,
                    request_deserializer=entities__v1__pb2.EntityRequest.FromString,
                    response_serializer=entities__v1__pb2.EntityReply.SerializeToString,
            ),
            'update_entity': grpc.unary_unary_rpc_method_handler(
                    servicer.update_entity,
                    request_deserializer=entities__v1__pb2.EntityRequest.FromString,
                    response_serializer=entities__v1__pb2.EntityReply.SerializeToString,
            ),
            'delete_entity_by_id': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_entity_by_id,
                    request_deserializer=entities__v1__pb2.EntityIdRequest.FromString,
                    response_serializer=entities__v1__pb2.EntityReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'entities_v1.Entities', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Entities(object):
    """The Entities service definition.
    """

    @staticmethod
    def get_entities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/entities_v1.Entities/get_entities',
            entities__v1__pb2.EntitiesPageRequest.SerializeToString,
            entities__v1__pb2.EntitiesPageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_entity_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/entities_v1.Entities/get_entity_by_id',
            entities__v1__pb2.EntityIdRequest.SerializeToString,
            entities__v1__pb2.EntityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_entity_by_name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/entities_v1.Entities/get_entity_by_name',
            entities__v1__pb2.EntityNameRequest.SerializeToString,
            entities__v1__pb2.EntityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_entity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/entities_v1.Entities/create_entity',
            entities__v1__pb2.EntityRequest.SerializeToString,
            entities__v1__pb2.EntityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_entity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/entities_v1.Entities/update_entity',
            entities__v1__pb2.EntityRequest.SerializeToString,
            entities__v1__pb2.EntityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_entity_by_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/entities_v1.Entities/delete_entity_by_id',
            entities__v1__pb2.EntityIdRequest.SerializeToString,
            entities__v1__pb2.EntityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
